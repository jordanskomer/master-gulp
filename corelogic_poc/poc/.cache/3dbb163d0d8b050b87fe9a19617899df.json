{"dependencies":[],"generated":{"js":"/**\n * Used to determine how many frames to load in for the transition\n */\nconst frameCount = 150;\nlet image1 = document.getElementById('j-scene1__image1')\n\nfunction getLength(x, y, x0, y0) {\n  return Math.sqrt((x -= x0) * x + (y -= y0) * y)\n}\n\nfunction odometer() {\n  let odometer = document.getElementsByClassName('odometer')[0]\n  document.getElementsByClassName('infographic')[0].classList.toggle('-active')\n  odometer.innerHTML = ''\n  new Odometer({\n    el: odometer,\n    duration: 300\n  })\n  odometer.innerHTML = odometer.getAttribute('info')\n}\n\nfunction setupLines() {\n  let $lines = document.getElementsByClassName('line')\n  for (let i = 0; i < $lines.length; i++) {\n    let length = getLength(\n      $lines[i].getAttribute('x1'),\n      $lines[i].getAttribute('y1'),\n      $lines[i].getAttribute('x2'),\n      $lines[i].getAttribute('y2')\n    )\n    $lines[i].style.strokeDashoffset = $lines[i].getAttribute('inverse') ? -length : length\n    $lines[i].style.strokeDasharray = length\n  }\n}\n\n/**\n * GSAP and ScrollMagic. Isn't animation easy?\n *\n * @author jordanskomer\n */\nlet animateThangs = () => {\n  let timeline = new TimelineMax()\n  let lineAnimLength = 0.75\n  let lineTweens = [\n    TweenMax.to('.line1', lineAnimLength, { strokeDashoffset: 0 }),\n    TweenMax.to('.line2', lineAnimLength, { strokeDashoffset: 0 }),\n    TweenMax.to('.line3', lineAnimLength, { strokeDashoffset: 0 }),\n    TweenMax.to('.line4', lineAnimLength, { strokeDashoffset: 0 }),\n    TweenMax.to('.line5', lineAnimLength, { strokeDashoffset: 0 }),\n    TweenMax.to('.line6', lineAnimLength, { strokeDashoffset: 0 }),\n    TweenMax.to('.line7', lineAnimLength, { strokeDashoffset: 0 }),\n  ]\n\n  let graphTween = [\n    TweenMax.to('#graph', 0.1, { fill: 'white' }),\n    TweenMax.to('#graph', 0.6, { attr: { points: '67,286 90,240 140,260 160,250 175,255 180,240 200,235 220,220 225,200 230,220 235,210 270,225 290,200 310,225 327,233' } }),\n    TweenMax.staggerTo('.a-graphText', 0.6, { opacity: 1 }, 0.1)\n  ]\n\n  let barTweens = [\n    TweenMax.to('#lineBarFill1', 0.5, { attr: { opacity: '0.5', points: '600,665 602,610 620,602 618,659' }}),\n    TweenMax.to('#lineBarFill2', 0.5, { attr: { opacity: '0.5', points: '628,654 629,625 646,618 645,647' } }),\n    TweenMax.to('#lineBarFill3', 0.5, { attr: { opacity: '0.5', points: '655,642 656,605 670,599 669,636' } })\n  ]\n\n  let bulletTweens = [\n    TweenMax.staggerTo('.bulletLine1', 0.5, { strokeDashoffset: 0 }, 0.2),\n    TweenMax.staggerTo('.bulletCircle1', 0.25, { opacity: 1 }, 0.3),\n    TweenMax.staggerTo('.bulletText1', 0.3, { opacity: 1 }, 0.32),\n    TweenMax.staggerTo('.bulletLine2', 0.5, { strokeDashoffset: 0 }, 0.2),\n    TweenMax.staggerTo('.bulletCircle2', 0.25, { opacity: 1 }, 0.3),\n    TweenMax.staggerTo('.bulletText2', 0.3, { opacity: 1 }, 0.32),\n    TweenMax.staggerTo('.bulletLine3', 0.5, { strokeDashoffset: 0 }, 0.2),\n    TweenMax.staggerTo('.bulletCircle3', 0.25, { opacity: 1 }, 0.3),\n    TweenMax.staggerTo('.bulletText3', 0.3, { opacity: 1 }, 0.32)\n  ]\n\n  for (let i = 0; i < lineTweens.length; i++) {\n    timeline.add(lineTweens[i], i * (lineAnimLength - 0.15))\n  }\n\n  for (let i = 0; i < bulletTweens.length; i+=3) {\n    let base = i\n    timeline.add(bulletTweens[i], (base * 0.1) + 1)\n    timeline.add(bulletTweens[i+1], (base * 0.1) + 1.2)\n    timeline.add(bulletTweens[i+2], (base * 0.1) + 1.3)\n    console.log(i)\n  }\n\n  timeline.add(graphTween[0], 1)\n  timeline.add(graphTween[1], 1.1)\n  timeline.add(graphTween[2], 1.5)\n\n  timeline.add(barTweens[0], 2)\n  timeline.add(barTweens[1], 2.3)\n  timeline.add(barTweens[2], 2.15)\n\n\n\n  let animController = new ScrollMagic.Controller({\n    globalSceneOptions: {\n      offset: 5\n    }\n  })\n  new ScrollMagic.Scene()\n    .setTween(timeline)\n    // .addIndicators()\n    .addTo(animController)\n\n  // 3d Animation\n  let tl = new TimelineMax()\n    .add(TweenMax.staggerTo('.m-images__image', 0.05, { opacity: 1 }, 0.05), 1)\n  let controller = new ScrollMagic.Controller({\n    globalSceneOptions: {\n      offset: 50\n    }\n  })\n  new ScrollMagic.Scene()\n    .on('enter', () => {\n      timeline.reverse(0).timeScale(4)\n    })\n    .setTween(tl)\n    // .addIndicators()\n    .addTo(controller)\n}\n/**\n * Preloads images in the background that will be used for the '3D' transition\n *\n * @author jordanskomer\n */\nlet preloader = () => {\n  // Insert all of the divs\n  for (let i = 2; i <= frameCount; i+=5) {\n    let newDiv = document.createElement('div')\n    newDiv.classList.add('m-images__image')\n    newDiv.id = 'j-scene1__image' + i\n    image1.parentNode.insertBefore(newDiv, image1.nextSibling)\n    newDiv.style.backgroundImage = 'url(\\'./images/image' + i + '.jpg\\')'\n  }\n  setupLines()\n  animateThangs()\n}\n\n/**\n * Support for making sure the preloader gets loaded in once the page has been painted and rendered\n *\n * @author jordanskomer\n */\nlet addLoadingEvent = (func) => {\n  let defaultLoad = window.onload\n  if(typeof window.onload !== 'function') {\n    window.onload = func\n  } else {\n    window.onload = () => {\n      if (defaultLoad) { defaultLoad() }\n      func()\n    }\n  }\n}\n\naddLoadingEvent(preloader)"},"hash":"80fed8420b911c0ca2248f7f0baa5db0"}